import java.nio.file.Files

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven  {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "Nucleoid"
        url = "https://maven.nucleoid.xyz"
    }
}

if (!Files.exists(file(".local/").toPath())) Files.createDirectory(file(".local").toPath())

def mc_ver_full = "${project.minecraft_version}.${project.minecraft_sub}"
def sta_ver_full = "${project.server_translation_version}+${mc_ver_full}-${project.server_translation_sub}"
def remapped_mc = "${mc_ver_full.split("\\.").join("_")}"
def remapped_folder_name = "net_fabricmc_yarn_${remapped_mc}_${remapped_mc}_build_${project.yarn_build}"
def remapped_folder = ".gradle/loom-cache/remapped_mods/${remapped_folder_name}/maven/modrinth/"
def unzip =  (CharSequence sourceFile, CharSequence fileName, CharSequence destinationFile) -> {
    println "from: ${sourceFile}"
    println "at: ${fileName}"
    println "to: ${destinationFile}"
    def t = copy {
        from(zipTree(sourceFile).filter {it.name == fileName}.first())
        into destinationFile
    }
    while (!t.getDidWork()) sleep(100)
    return new File(destinationFile, fileName)
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${mc_ver_full}"
    mappings "net.fabricmc:yarn:${mc_ver_full}+build.${project.yarn_build}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation include("maven.modrinth:unruled-api:${project.unruled_version}-fabric+${project.minecraft_version}")
    modImplementation include("xyz.nucleoid:server-translations-api:${sta_ver_full}")

    modRuntimeOnly "maven.modrinth:c2me-fabric:${project.c2me_version}+${mc_ver_full}"
    modCompileOnly files (unzip(
            "${remapped_folder}/c2me-fabric/${project.c2me_version}+${mc_ver_full}/c2me-fabric-${project.c2me_version}+${mc_ver_full}.jar",
            "c2me-fixes-worldgen-threading-issues-mc${mc_ver_full}-${project.c2me_version}.jar",
            ".local"
    ))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", mc_ver_full
    inputs.property "loader_version", project.loader_version
    inputs.property "unruled_version", project.unruled_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand inputs.properties
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = "${project.mod_id}-mc${mc_ver_full}"
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.mod_id}"}
    }
}

loom {
    accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
    }
}